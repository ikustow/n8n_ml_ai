{
  "name": "Feature Analysis Agent",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "sessionId"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1184,
        320
      ],
      "id": "d853a536-58ca-4fd0-b3fd-679b70841aea",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -880,
        576
      ],
      "id": "d4515c8c-bc4d-453f-9ad5-a6c8d4c3b8ba",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "4Hyy62lHGp6Iexmc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Code1').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -704,
        576
      ],
      "id": "938dd123-f84e-48f8-bcc0-81fea69c7db0",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "dataset",
        "returnAll": true,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -304,
        320
      ],
      "id": "09ecaccf-6a89-4969-b34a-cbd52d3a2f42",
      "name": "Get many rows",
      "credentials": {
        "supabaseApi": {
          "id": "6IICvvLdHjaBlV2r",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=If you have a dataset with this description of the fields: {{ $json.dataset_description }} , select the following parameters: \nnumerical features and categorical features",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a specialized agent for analyzing features in datasets.\n    \n    Your task:\n    1. Analyze dataset structure\n    2. Determine numerical features (int64, float64)\n    3. Ignore entity IDs (student_id, customer_id or similar)\n    4. Determine categorical features (object, string)\n    5. Provide a brief summary of the data\n    \n    Always use the analyze_dataset_features tool to perform analysis.\n    Return the result in structured JSON format\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -656,
        320
      ],
      "id": "3892b5bd-5ec7-48a1-882d-26476923f80d",
      "name": "Feature Analysis Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"numerical_features\":  [\"age\", \"GPA\", \"course_load\", \"avg_course_grade\",\"attendance_rate\", \"lms_logins_past_month\"],\n\t\"categorical_features\": [\"gender\", \"major\", \"enrollment_status\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -448,
        560
      ],
      "id": "e9a0c905-53e7-48a0-af7e-b956ddf46187",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "session_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('Code1').first().json.sessionId}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "segments_report",
              "fieldValue": "={{ $json.report }}"
            },
            {
              "fieldId": "segments_completed",
              "fieldValue": "true"
            },
            {
              "fieldId": "numeric_values",
              "fieldValue": "={{ $('Code2').item.json.numeric }}"
            },
            {
              "fieldId": "category_values",
              "fieldValue": "={{ $('Code2').item.json.categorial }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        192,
        320
      ],
      "id": "8c77bf8d-7ef4-4c28-84e4-a81cfc9edd3c",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "6IICvvLdHjaBlV2r",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 0. Константа на случай, если у первого элемента нет sessionId\nconst FALLBACK_ID = '123213213';\n\n// 1. Берём все входные элементы сразу\nconst items = $input.all();          // массив объектов {json, binary?}\n\n// 2. Определяем, какой sessionId будем писать:\n//    — если у первого элемента он уже есть → берём его;\n//    — иначе используем запасное значение.\nconst sessionId = $input.first().json.sessionId || FALLBACK_ID;\n\n// 3. Проходимся по каждому элементу и устанавливаем поле\nfor (const item of items) {\n  item.json.sessionId = sessionId;   // перезаписывает или добавляет поле\n}\n\n// 4. Обязательно вернуть массив items\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -992,
        320
      ],
      "id": "f151b269-130d-4776-aa6c-a9c38292d943",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "session_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "keyValue": "={{ $json.sessionId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -816,
        320
      ],
      "id": "21e38945-362c-48d6-a526-18dbc03e1696",
      "name": "Get a row",
      "credentials": {
        "supabaseApi": {
          "id": "6IICvvLdHjaBlV2r",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Режим: Run once for All Items\n# 1. Берём все входные элементы и оставляем только их JSON-часть\ncleaned = [item.json for item in _input.all()]          #:contentReference[oaicite:0]{index=0}\n\n# 2. Забираем результаты из узла “Feature Analysis Agent”\nfa_output = _(\"Feature Analysis Agent\").first().json[\"output\"]   #:contentReference[oaicite:1]{index=1}\nnumeric      = fa_output[\"numerical_features\"]\ncategorical  = fa_output[\"categorical_features\"]\n\n# 3. Возвращаем объект в формате, который ожидает n8n\nreturn [{\n    \"categorial\": categorical,   # сохраняю оригинальное имя поля\n    \"numeric\":    numeric,\n    \"students\":   cleaned\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        320
      ],
      "id": "939ff46a-2a2c-436c-88c3-6e63e6d6a1ba",
      "name": "Code2"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom scipy.sparse import issparse\n\n# ───────── 1. входные данные ─────────\ninp        = _input.first().json\nrecords    = inp[\"students\"]          # список словарей-студентов\nnum_cols   = inp[\"numeric\"]           # числовые признаки\ncat_cols   = inp[\"categorial\"]        # категориальные признаки\ndrop_other = True                     # фильтр gender == \"other\" (выключайте при нужде)\n\ndf = pd.DataFrame(records)\nif df.empty:\n    raise ValueError(\"DataFrame is empty — нет данных для кластеризации\")\n\nif drop_other and \"gender\" in df.columns:\n    df = df[df[\"gender\"].str.lower() != \"other\"]\n\n# ───────── 2. препроцессинг ─────────\nnumeric_present      = [c for c in num_cols if c in df.columns]\ncategorical_present  = [c for c in cat_cols if c in df.columns]\n\npre = ColumnTransformer([\n    (\"num\", StandardScaler(with_mean=False), numeric_present),      # with_mean=False → ok для sparse\n    (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), categorical_present),\n])\n\nX = pre.fit_transform(df)\nX_dense = X.toarray() if issparse(X) else X      # silhouette_score ждёт dense\n\n# ───────── 3. подбор оптимального k ─────────\nbest_k, best_score = None, -1\nfor k in range(2, min(11, len(df))):\n    labels = KMeans(n_clusters=k, n_init=10, random_state=42).fit_predict(X_dense)\n    if len(set(labels)) < 2:          # все в один кластер — пропускаем\n        continue\n    score = silhouette_score(X_dense, labels)\n    if score > best_score:\n        best_k, best_score = k, score\n\nif best_k is None:\n    raise ValueError(\"Не удалось подобрать k — данных слишком мало или они однородны\")\n\n# ───────── 4. итоговая модель ─────────\nkm = KMeans(n_clusters=best_k, n_init=10, random_state=42).fit(X_dense)\ndf[\"cluster\"] = km.labels_\n\n# ───────── 5. расширенный отчёт ─────────\nlines = [f\"Optimum k = {best_k} (silhouette = {best_score:.3f})\", \"\"]\nfor cid, part in df.groupby(\"cluster\"):\n    lines.append(f\"— Cluster {cid} —\")\n    lines.append(f\"Size: {len(part)}\")\n\n    if numeric_present:\n        means = part[numeric_present].mean().round(2).to_dict()\n        lines.append(f\"Numeric means: {means}\")\n\n    if categorical_present:\n        modes = {\n            c: (part[c].mode().iloc[0] if not part[c].mode().empty else None)\n            for c in categorical_present\n        }\n        lines.append(f\"Top categories: {modes}\")\n\n    lines.append(\"\")   # пустая строка-разделитель\n\nreport_text = \"\\n\".join(lines)\nprint(report_text)     # видно в консоли узла — удобно дебагать\n\n# ───────── 6. отдаём результат ─────────\nreturn [{\n    \"json\": {\n        \"report\":   report_text           # человекочитаемый отчёт\n      \n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        320
      ],
      "id": "0cc2f993-0513-4598-9d07-8201274184b2",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Feature Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Feature Analysis Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Feature Analysis Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Feature Analysis Agent": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Get a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row": {
      "main": [
        [
          {
            "node": "Feature Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "46c90c1b-0a84-46a6-80d3-150ca46742b2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "aff6233ea1a957f14a29dfbff3b08f776f10dd895024c1773cc4b009bd2f2c86"
  },
  "id": "nXKj6ZgCq4UWCy25",
  "tags": []
}